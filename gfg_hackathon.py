# -*- coding: utf-8 -*-
"""GFG Hackathon

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JVD1Vr6DJPUDzojYa4mFBO2LrcSpR6Hc
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('/content/Disease_symptom_and_patient_profile_dataset.csv')

# Check for missing values
print(df.isnull().sum())

# Handle missing values (e.g., fill with mean, median, or mode, or drop rows/columns)
# Example: Fill missing values in 'Age' with the mean age
df['Age'].fillna(df['Age'].mean(), inplace=True)

# Check for duplicate rows
print(df.duplicated().sum())

# Remove duplicate rows
df.drop_duplicates(inplace=True)

# Check for inconsistent data (e.g., different spellings of the same value)
# Example: Check for inconsistencies in 'Gender' column
print(df['Gender'].unique())

# Correct inconsistencies if needed
# Example: Replace 'Male' with 'M' and 'Female' with 'F'
df['Gender'].replace({'Male': 'M', 'Female': 'F'}, inplace=True)

# Check for outliers (e.g., using box plots or z-scores)
# Example: Check for outliers in 'Age' using box plot
sns.boxplot(x=df['Age'])
plt.show()

# Handle outliers (e.g., remove them, transform them, or cap them)
# Example: Remove rows where 'Age' is greater than a certain threshold
df = df[df['Age'] < 100]

# Convert data types if needed
# Example: Convert 'Age' to integer type
df['Age'] = df['Age'].astype(int)

# Ensure data consistency and validity
# Example: Check if 'Age' is within a reasonable range (e.g., 0-120)
df = df[(df['Age'] >= 0) & (df['Age'] <= 120)]

# Print the cleaned dataset info
print(df.info())

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Encode categorical features using Label Encoding
le = LabelEncoder()
for column in df.columns:
    if df[column].dtype == object:
        df[column] = le.fit_transform(df[column])

# Define features (X) and target variable (y)
X = df.drop('Disease', axis=1)  # Assuming 'Disease' is the target variable
y = df['Disease']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Choose a machine learning model (e.g., Random Forest)
model = RandomForestClassifier()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print(classification_report(y_test, y_pred))

# prompt: based on user input it tells output where it ask user about necessary details GIVEN COLUMN

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Assuming 'model' and 'le' (LabelEncoder) are already defined elsewhere

def get_user_input():
    """Gets user input for features."""
    user_input = {}

    for column in X.columns:
        if column == 'Age':
            while True:
                try:
                    age = int(input("Enter your age: "))
                    if 0 <= age <= 120:
                        user_input[column] = age
                        break
                    else:
                        print("Please enter a valid age between 0 and 120.")
                except ValueError:
                    print("Invalid input. Please enter a number.")

        elif column == 'Gender':
            while True:
                gender = input("Enter your gender (M/F): ").upper()
                if gender in ['Male', 'Female']:
                    user_input[column] = gender
                    break
                else:
                    print("Please enter a valid gender (M/F).")

        elif column.startswith('Symptom'):
            symptom = input(f"Enter your {column.lower()}: ")
            user_input[column] = symptom

    return user_input


def predict_disease(user_input):
    """Predicts the disease based on user input."""
    # Convert user input to DataFrame
    input_df = pd.DataFrame([user_input])

    # Encode categorical features
    for column in input_df.columns:
        if input_df[column].dtype == object:
            input_df[column] = le.transform(input_df[column])

    # Make prediction
    prediction = model.predict(input_df)
    return prediction[0]


# Get user input
user_input = get_user_input()

# Predict disease
predicted_disease = predict_disease(user_input)

# Print the predicted disease
print("Predicted Disease:", predicted_disease)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Display the first few rows of the dataset
print("Dataset Preview:")
print(df.head())

print("\nBasic Statistics:")
print(df.describe())

plt.figure(figsize=(12, 6))
sns.countplot(data=df, x='Disease', order = df['Disease'].value_counts().index)
plt.title('Distribution of Diseases')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(12, 6))
sns.countplot(data=df, x='Disease', order = df['Disease'].value_counts().index)
plt.title('Distribution of Diseases')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(6, 4))
sns.countplot(data=df, x='Gender')
plt.title('Gender Distribution')
plt.show()

plt.figure(figsize=(10, 5))
sns.histplot(df['Age'], bins=20, kde=True)
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(8, 4))
sns.countplot(data=df, x='Outcome Variable')
plt.title('Outcome Variable Distribution')
plt.show()

correlation = df.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation, cmap='coolwarm', annot=True)
plt.title('Correlation Heatmap')
plt.show()

